// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.24.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

///
///Generates all the needed keys for first time set up.
///It will then dump all of the keys in the client folder.
///The force argument will forcefully override all currently present
///keys in the client folder. Note that this will require a complete
///reupload of all keys to the server.
Future<String> generateKeys({dynamic hint}) =>
    RustLib.instance.api.generateKeys(hint: hint);

String signChallenge(
        {required String sIkSec, required String chal, dynamic hint}) =>
    RustLib.instance.api.signChallenge(sIkSec: sIkSec, chal: chal, hint: hint);

/// * Called upon registration to the server. Will publish all stored public
/// * keys.
///
Future<String> signAndPublish({required String keyJson, dynamic hint}) =>
    RustLib.instance.api.signAndPublish(keyJson: keyJson, hint: hint);

/// connection with someone
Future<(String, String)?> initHandshake(
        {required String keyBundle,
        required String sIkPub,
        required String sIkSec,
        dynamic hint}) =>
    RustLib.instance.api.initHandshake(
        keyBundle: keyBundle, sIkPub: sIkPub, sIkSec: sIkSec, hint: hint);

Future<String> completeHandshake(
        {required String handshake,
        required String sIkPub,
        required String sIkSec,
        required String sSpkSec,
        required String sPqpkSec,
        String? sOpkSec,
        dynamic hint}) =>
    RustLib.instance.api.completeHandshake(
        handshake: handshake,
        sIkPub: sIkPub,
        sIkSec: sIkSec,
        sSpkSec: sSpkSec,
        sPqpkSec: sPqpkSec,
        sOpkSec: sOpkSec,
        hint: hint);

String decryptMessage(
        {required String sSk, required List<int> combined, dynamic hint}) =>
    RustLib.instance.api
        .decryptMessage(sSk: sSk, combined: combined, hint: hint);

Uint8List encryptMessage(
        {required String sSk, required String msg, dynamic hint}) =>
    RustLib.instance.api.encryptMessage(sSk: sSk, msg: msg, hint: hint);

String greet({required String name, dynamic hint}) =>
    RustLib.instance.api.greet(name: name, hint: hint);
