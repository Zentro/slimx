// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.24.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:collection/collection.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// * Signs a message along with a secret key. Nonce NEEDS to be randomly generated
/// * preferably by a cryptographically secure PRG.
/// *
/// * Returns a 64 byte signature
///
Future<U8Array64> sign(
        {required U8Array32 sk,
        required List<int> msg,
        required List<int> nonce,
        dynamic hint}) =>
    RustLib.instance.api.sign(sk: sk, msg: msg, nonce: nonce, hint: hint);

/// * Verifies a message to its signature using a public key generated
/// * from the secret key derive from the X25519-Dalek functions.
///
Future<bool> verify(
        {required U8Array32 pk,
        required List<int> msg,
        required U8Array64 sig,
        dynamic hint}) =>
    RustLib.instance.api.verify(pk: pk, msg: msg, sig: sig, hint: hint);

class U8Array32 extends NonGrowableListView<int> {
  static const arraySize = 32;

  @internal
  Uint8List get inner => _inner;
  final Uint8List _inner;

  U8Array32(this._inner)
      : assert(_inner.length == arraySize),
        super(_inner);

  U8Array32.init() : this(Uint8List(arraySize));
}

class U8Array64 extends NonGrowableListView<int> {
  static const arraySize = 64;

  @internal
  Uint8List get inner => _inner;
  final Uint8List _inner;

  U8Array64(this._inner)
      : assert(_inner.length == arraySize),
        super(_inner);

  U8Array64.init() : this(Uint8List(arraySize));
}
